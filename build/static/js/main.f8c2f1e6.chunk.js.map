{"version":3,"sources":["query.js","constants.js","App.js","reportWebVitals.js","index.js"],"names":["QUERY","body","origin_data","Promise","resolve","fetch","method","mode","JSON","stringify","headers","Header","styled","div","App","type","useState","clickedBtn","setClickedBtn","DATA","setDATA","isLoading","setIsLoading","selectedUser","setSelectedUser","modalShow","setModalShow","setBurgerClick","loadUsers","usersType","query","then","res","json","data","users","catch","err","alert","useEffect","console","log","MyVerticallyCenteredModal","props","Modal","size","aria-labelledby","centered","closeButton","Title","id","profile","name","email","Body","Table","striped","bordered","hover","length","map","el","index","client","master","date","time","slice","status","offers","i","service","price_by_pack","duration","price","className","onClick","width","Button","style","margin","variant","block","active","Container","marginTop","about_me","city","client_appointments","master_appointments","show","onHide","display","height","justifyContent","alignItems","Spinner","animation","role","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8c2f1e6.chunk.js","sourcesContent":["import { PATH } from \"./constants\";\r\n\r\nconst QUERY = (body, origin_data) => {\r\n  return Promise.resolve(\r\n    fetch(`${PATH}`, {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        // \"Access-Control-Allow-Origin\": \"https://backend.partylive.by\",\r\n        \"Content-Type\": \"application/json\",\r\n        // Authorization: origin_data ? \"Bearer \" + origin_data : \"\",\r\n      },\r\n    })\r\n  );\r\n};\r\n\r\nexport default QUERY;\r\n","export const PATH = \"http://194.87.145.192/graphql\";\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport QUERY from \"./query\";\nimport { Container, Table, Button, Spinner, Modal } from \"react-bootstrap\";\nimport { slide as Menu } from \"react-burger-menu\";\n\nconst Header = styled.div`\n  height: 50px;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background-color: #eee;\n`;\n\nconst App = () => {\n  const type = { Master: \"Master\", Client: \"Client\" };\n  const [clickedBtn, setClickedBtn] = useState(\"\"),\n    [DATA, setDATA] = useState(null),\n    [isLoading, setIsLoading] = useState(false),\n    [selectedUser, setSelectedUser] = useState(\"\"),\n    [modalShow, setModalShow] = useState(false),\n    [burgerClick, setBurgerClick] = useState(false);\n\n  const loadUsers = (usersType) => {\n    setIsLoading(true);\n    QUERY({\n      query: `query {users (type: ${usersType}, first:${100}) { \n        data { \n          id type\n          profile {id city {id name} name email about_me}\n          master_appointments {\n            id date time status\n            offers {\n              description price_by_pack {duration price}\n              service {id name specialization {id name} photos {src}}\n            }\n            client {\n              profile {\n                name email\n              }\n            }\n          }\n          client_appointments {\n            id date time status\n            offers {\n              description price_by_pack {duration price}\n              service {id name specialization {id name} photos {src}}\n            }\n            master {\n              profile {\n                name email\n              }\n            }\n          }\n        } \n      }}`,\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setDATA(data.data.users.data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        alert(\"error\");\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    setClickedBtn(\"clients\");\n    loadUsers(type.Client);\n  }, []);\n\n  useEffect(() => {\n    console.log(DATA, \"-data\");\n  }, [DATA]);\n\n  const MyVerticallyCenteredModal = (props) => {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              <div>Appointments</div>\n              UserId: {selectedUser.id} Name:{\"  \"}\n              {selectedUser.profile ? selectedUser.profile.name : \"-\"} {\"  \"}\n              Email:\n              {selectedUser.profile ? selectedUser.profile.email : \"-\"}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Master/client</th>\n                  <th>Date</th>\n                  <th>Time</th>\n                  <th>Status</th>\n                  <th>Offers</th>\n                </tr>\n              </thead>\n              <tbody>\n                {modalShow &&\n                  modalShow.length &&\n                  modalShow.map((el, index) => (\n                    <tr>\n                      <td>{el.id}</td>\n                      <td>\n                        {el.client\n                          ? el.client.profile\n                            ? el.client.profile.name\n                            : \"-\"\n                          : el.master.profile\n                          ? el.master.profile.name\n                          : \"-\"}\n                      </td>\n                      <td>{el.date}</td>\n                      <td>{el.time.slice(0, 5)}</td>\n                      <td>{el.status}</td>\n                      <td>\n                        {el.offers.length\n                          ? el.offers.map((el, i) => (\n                              <tr>\n                                <td>{el.service.name}</td>\n                                <td>{el.price_by_pack.duration} мин.</td>\n                                <td>{el.price_by_pack.price} руб.</td>\n                              </tr>\n                            ))\n                          : \"-\"}\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n        </Modal>\n      );\n    },\n    showSettings = (event) => {\n      event.preventDefault();\n    };\n\n  return (\n    <div className=\"App\">\n      <Header onClick={() => setBurgerClick(true)} />\n\n      <Menu id={\"sidebar\"} className={\"my-menu\"} width={\"200px\"}>\n        <Button\n          style={{ margin: \"10px\", width: \"160px\" }}\n          variant=\"light\"\n          block\n          onClick={() => {\n            setClickedBtn(\"clients\");\n            loadUsers(type.Client);\n          }}\n          active={clickedBtn === \"clients\"}\n        >\n          Клиенты{\" \"}\n          {DATA &&\n            DATA.length &&\n            DATA[0].type === \"Client\" &&\n            `(${DATA.length})`}\n        </Button>\n        <Button\n          style={{ margin: \"10px\", width: \"160px\" }}\n          variant=\"light\"\n          block\n          onClick={() => {\n            setClickedBtn(\"masters\");\n            loadUsers(type.Master);\n          }}\n          active={clickedBtn === \"masters\"}\n        >\n          Мастера{\" \"}\n          {DATA &&\n            DATA.length &&\n            DATA[0].type === \"Master\" &&\n            `(${DATA.length})`}\n        </Button>\n      </Menu>\n\n      <Container>\n        <Table striped bordered hover style={{ marginTop: \"100px\" }}>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Name</th>\n              <th>About me</th>\n              <th>Email</th>\n              <th>City</th>\n              <th>Appointments</th>\n            </tr>\n          </thead>\n          <tbody>\n            {DATA &&\n              DATA.length &&\n              DATA.map((el, index) => (\n                <tr key={index}>\n                  <td>{el.id}</td>\n                  <td>\n                    {el.profile\n                      ? el.profile.name\n                        ? el.profile.name\n                        : \"-\"\n                      : \"-\"}\n                  </td>\n                  <td>\n                    {el.profile\n                      ? el.profile.about_me\n                        ? el.profile.about_me\n                        : \"-\"\n                      : \"-\"}\n                  </td>\n                  <td>\n                    {el.profile\n                      ? el.profile.email\n                        ? el.profile.email\n                        : \"-\"\n                      : \"-\"}\n                  </td>\n                  <td>\n                    {el.profile\n                      ? el.profile.city\n                        ? el.profile.city.name\n                        : \"-\"\n                      : \"-\"}\n                  </td>\n                  <td>\n                    {el.client_appointments.length !== 0 ||\n                    el.master_appointments.length !== 0 ? (\n                      <Button\n                        variant=\"warning\"\n                        onClick={() => {\n                          setModalShow(\n                            el.client_appointments.length !== 0\n                              ? el.client_appointments\n                              : el.master_appointments\n                          );\n                          setSelectedUser(el);\n                        }}\n                      >\n                        {el.client_appointments.length ||\n                          el.master_appointments.length}\n                      </Button>\n                    ) : (\n                      \"-\"\n                    )}\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </Table>\n      </Container>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n      {isLoading && (\n        <div\n          style={{\n            display: \"flex\",\n            height: \"100vh\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}